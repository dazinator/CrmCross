<?xml version="1.0" encoding="windows-1252"?>
<Project ToolsVersion="4.0"         
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>   
    <!--The version number of the assembly info-->
    <AssemblyVersionNumber Condition="$(AssemblyVersionNumber) == ''"></AssemblyVersionNumber>
    <!--The build number, if present will be appended as fourth digit in nuget package version number.-->
    <BuildVersionNumber Condition="$(BuildVersionNumber) == ''"></BuildVersionNumber>
    <!--A pre-release label. If present, will be appended to nuget package version number.-->
    <PreReleaseLabel Condition="$(PreReleaseLabel) == ''"></PreReleaseLabel>
    <!--The version number for the NuGet Package (This is a combination of assembly version number with appended build version number info or pre release label)-->
    <PackageVersionNumber Condition="$(PackageVersionNumber) == ''"></PackageVersionNumber>
    <!--Where the NuGet package will be output to.-->
    <PackageOutputDir Condition="$(PackageOutputDir) == ''">$(TargetDir.Trim('\\'))\NuGet\</PackageOutputDir>
    <PackageOutputDir Condition="$(PackageOutputDir) != ''">$(PackageOutputDir.Trim('\\'))</PackageOutputDir>
    <NuGetExe>$(SolutionDir)\..\tools\NuGet.CommandLine.2.8.6\tools\NuGet.exe</NuGetExe>
    <NuspecFileName>$(SolutionDir)\PortableCrmSdk\CrmCross.nuspec</NuspecFileName>

    <!-- For Android Unit Testing -->
    <AndroidSDKPath Condition="$(AndroidSDKPath) == ''">C:\Program Files (x86)\Android\android-sdk</AndroidSDKPath>
    <AndroidDebugBridgeExePath Condition="$(AndroidDebugBridgeExePath) == ''">$(AndroidSDKPath)\platform-tools\adb</AndroidDebugBridgeExePath>
    <AndroidSDKToolsPath Condition="$(AndroidSDKToolsPath) == ''">$(AndroidSDKPath.Trim('\\'))\tools</AndroidSDKToolsPath>
    <AndroidExePath Condition="$(AndroidExePath) == ''">$(AndroidSDKToolsPath)\android</AndroidExePath>
    <AndroidEmulatorExePath Condition="$(AndroidEmulatorExePath) == ''">$(AndroidSDKToolsPath)\emulator</AndroidEmulatorExePath>   
    <AndroidAvdName Condition="$(AndroidAvdName) == ''">AVD_GalaxyNexus_ToolsForApacheCordova</AndroidAvdName>
    <AndroidTestsProject Condition="$(AndroidTestsProjectPath) == ''">$(SolutionDir)\CrmCross.Android.Tests\CrmCross.Android.Tests.csproj</AndroidTestsProject>
    <AndroidTestsManifestPackageName Condition="$(AndroidTestsManifestPackageName) == ''">crmcross.android.tests</AndroidTestsManifestPackageName>
    <AndroidTestsApkPath Condition="$(AndroidTestsPackageName) == ''">$(SolutionDir)\CrmCross.Android.Tests\bin\release\crmcross.android.tests-signed.apk</AndroidTestsApkPath>
    <AndroidTestsInstrumentationClassPath Condition="$(AndroidTestsInstrumentationClassPath) == ''">crmcross.android.tests.TestInstrumentation</AndroidTestsInstrumentationClassPath>

  </PropertyGroup>

  <!--Launch a Process in Parallel-->
  <UsingTask TaskName="ExecAsync" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <!--The file path is the full path to the executable file to run-->
      <FilePath ParameterType="System.String" Required="true" />
      <!--The arguments should contain all the command line arguments that need to be sent to the application-->
      <Arguments ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
  string name = System.IO.Path.GetFileNameWithoutExtension(FilePath);
  Log.LogMessage("Starting {0}...", name);        
  System.Diagnostics.ProcessStartInfo processStartInfo = new System.Diagnostics.ProcessStartInfo(FilePath, Arguments);
  processStartInfo.UseShellExecute = true;
  System.Diagnostics.Process.Start(processStartInfo);
  Log.LogMessage("Finished running process {0}.", name);
  ]]>
      </Code>
    </Task>
  </UsingTask>

  <!--Launch a Process in Parallel-->
  <UsingTask TaskName="Sleep" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <!--The number of seconds to sleep for-->
      <Seconds ParameterType="System.Int32" Required="true" />    
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        TimeSpan sleepTime = new TimeSpan(0, 0, 0, Seconds, 0);
        Log.LogMessage(MessageImportance.Normal, "Sleeping for {0}.", sleepTime);
        System.Threading.Thread.Sleep(sleepTime);
        return true;  
  ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="RunUnitTestsOnAndroid">

    <PropertyGroup>           
      <InstallTestsApkCommand Condition="$(InstallTestsApkCommand) == ''">&quot;$(AndroidDebugBridgeExePath)&quot; install -r &quot;$(AndroidTestsApkPath)&quot;</InstallTestsApkCommand>
      <RunTestsCommand Condition="$(RunTestsCommand) == ''">&quot;$(AndroidDebugBridgeExePath)&quot; shell am instrument -w $(AndroidTestsManifestPackageName)/$(AndroidTestsInstrumentationClassPath)</RunTestsCommand>
     </PropertyGroup>    
    <!--Build the tests apk-->
    <ItemGroup>
      <ProjectReferences Include="$(AndroidTestsProject)" />
    </ItemGroup>
    <MSBuild
        Projects="@(ProjectReferences)"
        Properties="Configuration=Release"
        Targets="SignAndroidPackage">
      <Output
          TaskParameter="TargetOutputs"
          ItemName="AssembliesBuiltByChildProjects" />
    </MSBuild>
   
    <ExecAsync FilePath='$(AndroidEmulatorExePath)' Arguments='-avd $(AndroidAvdName) -no-boot-anim' ContinueOnError='true'/>
 
    <!--Let the emulator finish starting up-->
    <Message Text="Waiting for emulator to finish starting..."/>
    <Sleep Seconds='120' ContinueOnError='true'/>   

    <!--Install the apk -->
    <Message Text="Installing tests apk."/>
    <Exec Command="$(InstallTestsApkCommand)" IgnoreExitCode="true" />  

    <!--Run tests -->
    <Exec Command="$(RunTestsCommand)" />

    <!--TODO: Kill emulator -->
    

  </Target>

  <!--Builds the project targeting .NET 4.0.-->
  <Target Name="BuildRelease">
    <Message  Importance="high" Text="Building Release.."/>
    <ItemGroup>
      <ProjectReferences Include="$(ProjectPath)" />
    </ItemGroup>
    <MSBuild
        Projects="@(ProjectReferences)"
        Properties="Configuration=Release"
        Targets="Build">
      <Output
          TaskParameter="TargetOutputs"
          ItemName="AssembliesBuiltByChildProjects" />
    </MSBuild>
  </Target> 

  <!--Reads the assembly version number.-->
  <Target Name="GetPackageVersionNumber" Condition="$(PackageVersionNumber) == ''">
    <!-- Read the assembly version number and use that for the package version number -->
    <GetAssemblyIdentity AssemblyFiles="$(OutputPath)$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="OutputAssemblyInfo" />
    </GetAssemblyIdentity>
    <Message Text="Info: %(OutputAssemblyInfo.Version)" />
    <PropertyGroup>
      <AssemblyVersionNumber>%(OutputAssemblyInfo.Version)</AssemblyVersionNumber>
      <!-- If a BuildVersionNumber is supplied we can append that as the last digit of the package version number -->
      <PackageVersionNumber Condition="$(BuildVersionNumber) != ''">$(AssemblyVersionNumber).$(BuildVersionNumber)</PackageVersionNumber>
      <PackageVersionNumber Condition="$(BuildVersionNumber) == ''">$(AssemblyVersionNumber)</PackageVersionNumber>
      <!-- If a PreRelease label is supplied we can append that as the label -->
      <PackageVersionNumber Condition="$(PreReleaseLabel) != ''">$(AssemblyVersionNumber)-$(PreReleaseLabel)</PackageVersionNumber>
    </PropertyGroup>
    <Message Text="Package Version Number Output : $(PackageVersionNumber)"/>
  </Target>

  <!--Creates the NuGet package/s.-->
  <Target Name="CreatePackages">
    <Message Importance="high" Text="Building packages"/>
    <Message Importance="high" Text="NuGet Package version number is $(PackageVersionNumber)"/>
    <Message Importance="high" Text="Package output directory is $(PackageOutputDir)"/>

    <!-- Ensure the Package directory exists for this project -->
    <RemoveDir Directories="$(PackageOutputDir)" />
    <MakeDir Directories="$(PackageOutputDir)" />

    <PropertyGroup>
      <BuildCommand>$(NuGetExe) pack $(SolutionDir)\$(NuspecFileName) -Properties "Configuration=$(Configuration);Platform=$(Platform);" $(NonInteractiveSwitch) -OutputDirectory "$(PackageOutputDir)" -Version "$(PackageVersionNumber)" -symbols -Verbose</BuildCommand>
      <OutputPackage>$(PackageOutputDir)\$(TargetName).$(PackageVersionNumber).nupkg</OutputPackage>
    </PropertyGroup>

    <Message Importance="high" Text="Build command is $(BuildCommand)"/>

    <Exec Command="$(BuildCommand)"
           LogStandardErrorAsError="true"
           Condition=" '$(OS)' == 'Windows_NT' " />
    <Message  Importance="high" Text="Package created.."/>

  </Target>

  <!--Pushes the NuGet package/s.-->
  <Target Name="PushPackages">

    <PropertyGroup>
      <PushCommand>$(NuGetExe) push "$(OutputPackage)" -s $(PushTo)</PushCommand>
    </PropertyGroup>
    <Message Importance="high" Text="Push command is $(PushCommand)"/>
    <Message Importance="high" Text="Expected Output Package is $(OutputPackage)"/>

    <Exec Command="$(PushCommand)"/>
    <Message  Importance="high" Text="Package pushed to $(PushTo)"/>
  </Target>

</Project>
